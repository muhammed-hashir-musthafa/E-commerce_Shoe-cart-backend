"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Joi: () => import_joi.default,
  ValidationError: () => import_joi.ValidationError,
  default: () => src_default,
  expressJoiValidations: () => expressJoiValidations,
  validate: () => validate,
  validateBody: () => validateBody,
  validateHeaders: () => validateHeaders,
  validateParams: () => validateParams,
  validateQuery: () => validateQuery
});
module.exports = __toCommonJS(src_exports);

// src/config.ts
var Config = {
  headers: {
    allowUnknown: true
  },
  params: {
    allowUnknown: false
  },
  query: {
    allowUnknown: false
  },
  body: {
    allowUnknown: false,
    stripUnknown: true
  }
};
var config_default = Config;

// src/index.ts
var import_joi = __toESM(require("joi"));
var expressJoiValidations = (configs) => (req, _, next) => {
  req.validationConfigs = configs;
  next();
};
var validate = (props, options) => (req, _, next) => {
  req.validationConfigs || (req.validationConfigs = {});
  req.validationErrors || (req.validationErrors = {});
  req.validationValues || (req.validationValues = {});
  const { throwErrors = false, overwriteRequest = false } = req.validationConfigs;
  for (const [key, schema] of Object.entries(props)) {
    if (schema) {
      const configs = __spreadValues(__spreadValues({}, config_default[key]), options);
      const { error, value } = schema.validate(req[key], configs);
      req.validationErrors[key] = error;
      req.validationValues[key] = value;
      if (error && throwErrors)
        throw error;
      if (overwriteRequest)
        Object.assign(req[key], value);
    }
  }
  next();
};
var validateHeaders = (headers, options) => validate({ headers }, options);
var validateParams = (params, options) => validate({ params }, options);
var validateQuery = (query, options) => validate({ query }, options);
var validateBody = (body, options) => validate({ body }, options);
var src_default = validate;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Joi,
  ValidationError,
  expressJoiValidations,
  validate,
  validateBody,
  validateHeaders,
  validateParams,
  validateQuery
});
//# sourceMappingURL=index.js.map