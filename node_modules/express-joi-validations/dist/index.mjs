var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/config.ts
var Config = {
  headers: {
    allowUnknown: true
  },
  params: {
    allowUnknown: false
  },
  query: {
    allowUnknown: false
  },
  body: {
    allowUnknown: false,
    stripUnknown: true
  }
};
var config_default = Config;

// src/index.ts
import { default as default2, ValidationError } from "joi";
var expressJoiValidations = (configs) => (req, _, next) => {
  req.validationConfigs = configs;
  next();
};
var validate = (props, options) => (req, _, next) => {
  req.validationConfigs || (req.validationConfigs = {});
  req.validationErrors || (req.validationErrors = {});
  req.validationValues || (req.validationValues = {});
  const { throwErrors = false, overwriteRequest = false } = req.validationConfigs;
  for (const [key, schema] of Object.entries(props)) {
    if (schema) {
      const configs = __spreadValues(__spreadValues({}, config_default[key]), options);
      const { error, value } = schema.validate(req[key], configs);
      req.validationErrors[key] = error;
      req.validationValues[key] = value;
      if (error && throwErrors)
        throw error;
      if (overwriteRequest)
        Object.assign(req[key], value);
    }
  }
  next();
};
var validateHeaders = (headers, options) => validate({ headers }, options);
var validateParams = (params, options) => validate({ params }, options);
var validateQuery = (query, options) => validate({ query }, options);
var validateBody = (body, options) => validate({ body }, options);
var src_default = validate;
export {
  default2 as Joi,
  ValidationError,
  src_default as default,
  expressJoiValidations,
  validate,
  validateBody,
  validateHeaders,
  validateParams,
  validateQuery
};
//# sourceMappingURL=index.mjs.map