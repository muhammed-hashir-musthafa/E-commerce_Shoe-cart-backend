{"version":3,"sources":["../src/config.ts","../src/index.ts"],"sourcesContent":["import { ValidationOptions } from 'joi';\n\ninterface Config {\n  [key: string]: ValidationOptions;\n}\n\nconst Config: Config = {\n  headers: {\n    allowUnknown: true,\n  },\n  params: {\n    allowUnknown: false,\n  },\n  query: {\n    allowUnknown: false,\n  },\n  body: {\n    allowUnknown: false,\n    stripUnknown: true,\n  },\n};\n\nexport default Config;\n","import { Request, Response, NextFunction } from 'express';\nimport { AnySchema, ValidationOptions, ValidationError } from 'joi';\nimport type { Entries } from 'type-fest';\nimport Config from './config';\n\nexport interface ValidationConfigs {\n  throwErrors?: boolean;\n  overwriteRequest?: boolean;\n}\n\nexport interface ValidationErrors {\n  headers?: ValidationError;\n  params?: ValidationError;\n  query?: ValidationError;\n  body?: ValidationError;\n}\n\nexport interface ValidationValues {\n  headers?: any;\n  params?: any;\n  query?: any;\n  body?: any;\n}\nexport interface ValidationRequest extends Request {\n  validationConfigs?: ValidationConfigs;\n  validationErrors?: ValidationErrors;\n  validationValues?: ValidationValues;\n}\nexport interface ValidationProps {\n  headers?: AnySchema;\n  params?: AnySchema;\n  query?: AnySchema;\n  body?: AnySchema;\n}\n\nexport const expressJoiValidations = (configs: ValidationConfigs) => (req: ValidationRequest, _: Response, next: NextFunction) => {\n  req.validationConfigs = configs;\n  next();\n};\n\nexport const validate = (props: ValidationProps, options?: ValidationOptions) => (req: ValidationRequest, _: Response, next: NextFunction) => {\n  req.validationConfigs ||= {};\n  req.validationErrors ||= {};\n  req.validationValues ||= {};\n\n  const { throwErrors = false, overwriteRequest = false } = req.validationConfigs;\n\n  for (const [key, schema] of Object.entries(props) as Entries<typeof props>) {\n    if (schema) {\n      const configs = { ...Config[key], ...options };\n      const { error, value } = schema.validate(req[key as keyof Request], configs);\n\n      req.validationErrors[key as keyof ValidationErrors] = error;\n      req.validationValues[key as keyof ValidationValues] = value;\n\n      if (error && throwErrors) throw error;\n      if (overwriteRequest) Object.assign(req[key as keyof Request], value);\n    }\n  }\n\n  next();\n};\n\nexport const validateHeaders = (headers: AnySchema, options?: ValidationOptions) => validate({ headers }, options);\nexport const validateParams = (params: AnySchema, options?: ValidationOptions) => validate({ params }, options);\nexport const validateQuery = (query: AnySchema, options?: ValidationOptions) => validate({ query }, options);\nexport const validateBody = (body: AnySchema, options?: ValidationOptions) => validate({ body }, options);\n\nexport { default as Joi, ValidationError } from 'joi';\n\nexport default validate;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAMA,IAAM,SAAiB;AAAA,EACrB,SAAS;AAAA,IACP,cAAc;AAAA,EAChB;AAAA,EACA,QAAQ;AAAA,IACN,cAAc;AAAA,EAChB;AAAA,EACA,OAAO;AAAA,IACL,cAAc;AAAA,EAChB;AAAA,EACA,MAAM;AAAA,IACJ,cAAc;AAAA,IACd,cAAc;AAAA,EAChB;AACF;AAEA,IAAO,iBAAQ;;;AC8Cf,SAAoB,WAAXA,UAAgB,uBAAuB;AAjCzC,IAAM,wBAAwB,CAAC,YAA+B,CAAC,KAAwB,GAAa,SAAuB;AAChI,MAAI,oBAAoB;AACxB,OAAK;AACP;AAEO,IAAM,WAAW,CAAC,OAAwB,YAAgC,CAAC,KAAwB,GAAa,SAAuB;AAC5I,MAAI,sBAAJ,IAAI,oBAAsB,CAAC;AAC3B,MAAI,qBAAJ,IAAI,mBAAqB,CAAC;AAC1B,MAAI,qBAAJ,IAAI,mBAAqB,CAAC;AAE1B,QAAM,EAAE,cAAc,OAAO,mBAAmB,MAAM,IAAI,IAAI;AAE9D,aAAW,CAAC,KAAK,MAAM,KAAK,OAAO,QAAQ,KAAK,GAA4B;AAC1E,QAAI,QAAQ;AACV,YAAM,UAAU,kCAAK,eAAO,GAAG,IAAM;AACrC,YAAM,EAAE,OAAO,MAAM,IAAI,OAAO,SAAS,IAAI,GAAoB,GAAG,OAAO;AAE3E,UAAI,iBAAiB,GAA6B,IAAI;AACtD,UAAI,iBAAiB,GAA6B,IAAI;AAEtD,UAAI,SAAS;AAAa,cAAM;AAChC,UAAI;AAAkB,eAAO,OAAO,IAAI,GAAoB,GAAG,KAAK;AAAA,IACtE;AAAA,EACF;AAEA,OAAK;AACP;AAEO,IAAM,kBAAkB,CAAC,SAAoB,YAAgC,SAAS,EAAE,QAAQ,GAAG,OAAO;AAC1G,IAAM,iBAAiB,CAAC,QAAmB,YAAgC,SAAS,EAAE,OAAO,GAAG,OAAO;AACvG,IAAM,gBAAgB,CAAC,OAAkB,YAAgC,SAAS,EAAE,MAAM,GAAG,OAAO;AACpG,IAAM,eAAe,CAAC,MAAiB,YAAgC,SAAS,EAAE,KAAK,GAAG,OAAO;AAIxG,IAAO,cAAQ;","names":["default"]}