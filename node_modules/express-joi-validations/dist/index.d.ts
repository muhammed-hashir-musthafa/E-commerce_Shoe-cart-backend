import { Request, Response, NextFunction } from 'express';
import { ValidationError, AnySchema, ValidationOptions } from 'joi';
export { default as Joi, ValidationError } from 'joi';

interface ValidationConfigs {
    throwErrors?: boolean;
    overwriteRequest?: boolean;
}
interface ValidationErrors {
    headers?: ValidationError;
    params?: ValidationError;
    query?: ValidationError;
    body?: ValidationError;
}
interface ValidationValues {
    headers?: any;
    params?: any;
    query?: any;
    body?: any;
}
interface ValidationRequest extends Request {
    validationConfigs?: ValidationConfigs;
    validationErrors?: ValidationErrors;
    validationValues?: ValidationValues;
}
interface ValidationProps {
    headers?: AnySchema;
    params?: AnySchema;
    query?: AnySchema;
    body?: AnySchema;
}
declare const expressJoiValidations: (configs: ValidationConfigs) => (req: ValidationRequest, _: Response, next: NextFunction) => void;
declare const validate: (props: ValidationProps, options?: ValidationOptions) => (req: ValidationRequest, _: Response, next: NextFunction) => void;
declare const validateHeaders: (headers: AnySchema, options?: ValidationOptions) => (req: ValidationRequest, _: Response, next: NextFunction) => void;
declare const validateParams: (params: AnySchema, options?: ValidationOptions) => (req: ValidationRequest, _: Response, next: NextFunction) => void;
declare const validateQuery: (query: AnySchema, options?: ValidationOptions) => (req: ValidationRequest, _: Response, next: NextFunction) => void;
declare const validateBody: (body: AnySchema, options?: ValidationOptions) => (req: ValidationRequest, _: Response, next: NextFunction) => void;

export { type ValidationConfigs, type ValidationErrors, type ValidationProps, type ValidationRequest, type ValidationValues, validate as default, expressJoiValidations, validate, validateBody, validateHeaders, validateParams, validateQuery };
